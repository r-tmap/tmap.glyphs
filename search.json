[{"path":"https://r-tmap.github.io/tmap.glyphs/articles/donuts.html","id":"donut-maps","dir":"Articles","previous_headings":"","what":"Donut maps","title":"Donut glyphs","text":"","code":"ZH_muni = NLD_muni[NLD_muni$province == \"Zuid-Holland\", ]  ZH_muni$income_middle = 100 - ZH_muni$income_high - ZH_muni$income_low  which.max(ZH_muni$population)  ZH_muni$population[c(10,26)] = 500000  ZH_muni$income_high[1:15] = NA  tm_shape(ZH_muni) +   tm_polygons() +   tm_donuts(parts = tm_vars(c(\"income_low\", \"income_middle\", \"income_high\"), multivariate = TRUE),     fill.scale = tm_scale_categorical(values = \"-pu_gn_div\"),                  size = \"population\",     lwd = 1,     size.scale = tm_scale_continuous(ticks = c(50000, 100000, 250000, 500000)),     options = opt_tm_donuts(fill_hole = FALSE))"},{"path":"https://r-tmap.github.io/tmap.glyphs/articles/flowers.html","id":"flower-maps","dir":"Articles","previous_headings":"","what":"Flower maps","title":"Flower glyphs","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE  q = function(x) {     r = rank(x)     r[is.na(x)] = NA     r = r / max(r, na.rm = TRUE)     r }  World$norm_well_being = q((World$well_being / 8)) World$norm_footprint = q(((50 - World$footprint) / 50)) World$norm_inequality = q(((65 - World$inequality) / 65)) World$norm_press = q(1 - ((100 - World$press) / 100)) World$norm_gender = q(1 - World$gender)   tm_shape(World) +     tm_polygons(fill = \"white\", popup.vars = FALSE) + tm_shape(World) +        tm_flowers(parts = tm_vars(c(\"norm_gender\", \"norm_press\", \"norm_footprint\", \"norm_well_being\", \"norm_inequality\"), multivariate = TRUE),                fill.scale = tm_scale(values = \"friendly5\"),                size = 1, popup.vars = c(\"norm_gender\", \"norm_press\", \"norm_footprint\", \"norm_well_being\",\"norm_inequality\"), id = \"name\") +     tm_basemap(NULL) +     tm_layout(bg.color = \"grey90\") #> [tip] Consider a suitable map projection, e.g. by adding `+ tm_crs(\"auto\")`. #> This message is displayed once per session."},{"path":"https://r-tmap.github.io/tmap.glyphs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martijn Tennekes. Author, maintainer.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tennekes M (2025). tmap.glyphs: Extension 'tmap' Creating Glyphs. R package version 0.1, https://github.com/r-tmap/tmap.glyphs.","code":"@Manual{,   title = {tmap.glyphs: Extension to 'tmap' for Creating Glyphs},   author = {Martijn Tennekes},   year = {2025},   note = {R package version 0.1},   url = {https://github.com/r-tmap/tmap.glyphs}, }"},{"path":"https://r-tmap.github.io/tmap.glyphs/index.html","id":"tmapglyphs-glyphs-in-tmap-","dir":"","previous_headings":"","what":"Extension to tmap for Creating Glyphs","title":"Extension to tmap for Creating Glyphs","text":"Provides new layer functions tmap create various types glyph maps. glyph small chart (e.g., donut chart) shown specific map locations visualize multivariate time-series data. functions work syntax tmap allow flexible control size, layout, appearance.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extension to tmap for Creating Glyphs","text":"Installation tmap.glpyhs straightforward:","code":"install.packages(\"tmap.glyphs\")"},{"path":"https://r-tmap.github.io/tmap.glyphs/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Extension to tmap for Creating Glyphs","text":"development version, also recommended install development version tmap well.","code":"# install.packages(\"remotes\") remotes::install_github(\"r-tmap/tmap.glyphs\")  # On Linux, with pak # install.packages(\"pak\") pak::pak(\"r-tmap/tmap.glyphs\")  # Or from r-universe install.packages(\"tmap.glyphs\", repos = c(\"https://r-tmap.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://r-tmap.github.io/tmap.glyphs/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Extension to tmap for Creating Glyphs","text":"See https://r-tmap.github.io/tmap.glpyhs","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/internals_glyphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal methods for tm_flowers — tmapGridDataPlot.tm_data_donuts","title":"Internal methods for tm_flowers — tmapGridDataPlot.tm_data_donuts","text":"Internal methods tm_flowers","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/internals_glyphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal methods for tm_flowers — tmapGridDataPlot.tm_data_donuts","text":"","code":"tmapGridDataPlot.tm_data_donuts(   a,   shpTM,   dt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapLeafletDataPlot.tm_data_donuts(   a,   shpTM,   dt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapGridDataPlot.tm_data_flowers(   a,   shpTM,   dt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapLeafletDataPlot.tm_data_flowers(   a,   shpTM,   dt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/internals_glyphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal methods for tm_flowers — tmapGridDataPlot.tm_data_donuts","text":"shpTM, dt, gp, bbx, facet_row, facet_col, facet_page, id, pane, group, o, ... described","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/internals_glyphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal methods for tm_flowers — tmapGridDataPlot.tm_data_donuts","text":"internal tmap object","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_donuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: donuts — opt_tm_donuts","title":"Map layer: donuts — opt_tm_donuts","text":"Map layer draw donuts glyphs","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_donuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: donuts — opt_tm_donuts","text":"","code":"opt_tm_donuts(   start = 0,   direction = 1,   inner = 0.4,   fill_hole = NA,   points_only = \"ifany\",   point_per = \"feature\",   on_surface = FALSE,   icon.scale = 6,   just = NA,   grob.dim = c(width = 48, height = 48, render.width = 256, render.height = 256) )  tm_donuts(   parts = tmap::tm_vars(multivariate = TRUE),   parts.scale = tm_scale_composition(),   parts.legend = tmap::tm_legend_hide(),   parts.chart = tmap::tm_chart_none(),   parts.free = NA,   size = tmap::tm_const(),   size.scale = tmap::tm_scale(),   size.legend = tmap::tm_legend(),   size.chart = tmap::tm_chart_none(),   size.free = NA,   fill.scale = tmap::tm_scale(),   fill.legend = tmap::tm_legend(),   fill.chart = tmap::tm_chart_none(),   fill.free = NA,   col = tmap::tm_const(),   col.scale = tmap::tm_scale(),   col.legend = tmap::tm_legend(),   col.chart = tmap::tm_chart_none(),   col.free = NA,   lwd = tmap::tm_const(),   lwd.scale = tmap::tm_scale(),   lwd.legend = tmap::tm_legend(),   lwd.chart = tmap::tm_chart_none(),   lwd.free = NA,   plot.order = tmap::tm_plot_order(\"DATA\", reverse = FALSE),   zindex = NA,   group = NA,   group.control = \"check\",   popup.vars = NA,   popup.format = list(),   hover = \"\",   id = \"\",   options = opt_tm_donuts() )"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_donuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: donuts — opt_tm_donuts","text":"start starting angle pies. 0 means top direction direction pies stacked. 1 means clockwise, 0 counterclockwise inner proportion inner circle fill_hole hole filled? Either `FALSE` fill color. points_only point geometries shape object (defined [tm_shape()]) plotted? default `\"ifany\"`, means `TRUE` case geometry collection specified. point_per specification spatial points mapped geometry multi line multi polygon. One \"feature\", \"segment\" \"largest\". first generates spatial point every feature, second every segment (.e. subfeature), third largest segment (subfeature). Note last two options can significant slower. on_surface case polygons, centroids computed. points surface? `TRUE`, slower default `FALSE`, centroids outside surface replaced points computed [sf::st_point_on_surface()]. icon.scale scaling number determines large icons (grobs) plot mode comparison proportional symbols (bubbles). view mode, use argument `grob.dim` just justification text relative point coordinates. Either one following values: \"left\" , \"right\", \"center\", \"bottom\", \"top\", vector two values first value specifies horizontal second value vertical justification. Besides mentioned values, also numeric values 0 1 can used. 0 means left justification first value bottom justification second value. Note view mode, one value used. grob.dim vector four values determine grob objects (see details) shown view mode. first second value width height displayed icon. third fourth value width height rendered png image used icon. Generally, third fourth value large enough render graphic successfully. needed view mode. parts, parts.scale, parts.legend, parts.chart, parts.free Variables determine size parts size, size.scale, size.legend, size.chart, size.free Variables determine size donut col, col.scale, col.legend, col.chart, col.free Visual variable determines col color. See details. lwd, lwd.scale, lwd.legend, lwd.chart, lwd.free Visual variable determines line width. See details. plot.order Specification order spatial features drawn. See [tm_plot_order()] details. zindex Map layers drawn top . `zindex` numbers (one map layer) determines stacking order. default map layers drawn order called. group Name group layer belongs. relevant view mode, layer groups can switched (see `group.control`) group.control view mode, group control determines layer groups can switched . Options: `\"radio\"` radio buttons (meaning one group can shown), `\"check\"` check boxes (multiple groups can shown), `\"none\"` control (group (de)selected). popup.vars names data variables shown popups `\"view\"` mode. Set popup.vars `TRUE` show variables shape object. Set popup.vars `FALSE` disable popups. Set popup.vars character vector variable names variables popups. default (`NA`) depends whether visual variables (e.g.`col`) used. , shown. variables shape object shown. popup.format list formatting options popup values. See argument `legend.format` options. applicable numeric data variables. one list formatting options provided, applied numeric variables `popup.vars`. Also, (named) list lists can provided. case, list formatting options applied named variable. hover name data variable specifies hover labels (view mode ). Set `FALSE` disable hover labels. default `FALSE`, unless `id` specified. case, set `id`, id name data variable specifies indices spatial features. used `\"view\"` mode. options options passed corresponding `opt_<layer_function>` function fill, fill.scale, fill.legend, fill.chart, fill.free Visual variable determines fill color. See details.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_donuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map layer: donuts — opt_tm_donuts","text":"[tmap::tmap-element], supposed stacked [tmap::tm_shape()] using `+` operator. `opt_<layer_function>` function returns list passed `options` argument.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_donuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map layer: donuts — opt_tm_donuts","text":"","code":"library(tmap)  ZH_muni = NLD_muni[NLD_muni$province == \"Zuid-Holland\", ]  ZH_muni$income_middle = 100 - ZH_muni$income_high - ZH_muni$income_low  which.max(ZH_muni$population) #> [1] 26  ZH_muni$population[c(10,26)] = 500000  ZH_muni$income_high[1:15] = NA  tm_shape(ZH_muni) +   tm_polygons() +   tm_donuts(parts = tm_vars(c(\"income_low\", \"income_middle\", \"income_high\"), multivariate = TRUE),     fill.scale = tm_scale_categorical(values = \"-pu_gn_div\"),             size = \"population\",     lwd = 1,     size.scale = tm_scale_continuous(ticks = c(50000, 100000, 250000, 500000)),     options = opt_tm_donuts(fill_hole = FALSE)) #> [plot mode] fit legend/component: Some legend items or map compoments do not #> fit well, and are therefore rescaled. #> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling."},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_flowers.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: flowers — opt_tm_flowers","title":"Map layer: flowers — opt_tm_flowers","text":"Map layer draw flowers glyphs","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_flowers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: flowers — opt_tm_flowers","text":"","code":"opt_tm_flowers(   start = 0,   direction = 1,   inner = 0.4,   fill_hole = NA,   points_only = \"ifany\",   point_per = \"feature\",   on_surface = FALSE,   icon.scale = 6,   just = NA,   grob.dim = c(width = 48, height = 48, render.width = 256, render.height = 256) )  tm_flowers(   parts = tmap::tm_vars(multivariate = TRUE),   parts.scale = tm_scale_multi(),   parts.legend = tmap::tm_legend_hide(),   parts.chart = tmap::tm_chart_none(),   parts.free = NA,   size = tmap::tm_const(),   size.scale = tmap::tm_scale(),   size.legend = tmap::tm_legend(),   size.chart = tmap::tm_chart_none(),   size.free = NA,   fill.scale = tmap::tm_scale(),   fill.legend = tmap::tm_legend(),   fill.chart = tmap::tm_chart_none(),   fill.free = NA,   col = tmap::tm_const(),   col.scale = tmap::tm_scale(),   col.legend = tmap::tm_legend(),   col.chart = tmap::tm_chart_none(),   col.free = NA,   lwd = tmap::tm_const(),   lwd.scale = tmap::tm_scale(),   lwd.legend = tmap::tm_legend(),   lwd.chart = tmap::tm_chart_none(),   lwd.free = NA,   plot.order = tmap::tm_plot_order(\"DATA\", reverse = FALSE),   zindex = NA,   group = NA,   group.control = \"check\",   popup.vars = NA,   popup.format = list(),   hover = \"\",   id = \"\",   options = opt_tm_flowers() )"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_flowers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: flowers — opt_tm_flowers","text":"start starting angle pies. 0 means top direction direction pies stacked. 1 means clockwise, 0 counterclockwise inner proportion inner circle fill_hole hole filled? Either `FALSE` fill color. points_only point geometries shape object (defined [tm_shape()]) plotted? default `\"ifany\"`, means `TRUE` case geometry collection specified. point_per specification spatial points mapped geometry multi line multi polygon. One \"feature\", \"segment\" \"largest\". first generates spatial point every feature, second every segment (.e. subfeature), third largest segment (subfeature). Note last two options can significant slower. on_surface case polygons, centroids computed. points surface? `TRUE`, slower default `FALSE`, centroids outside surface replaced points computed [sf::st_point_on_surface()]. icon.scale scaling number determines large icons (grobs) plot mode comparison proportional symbols (bubbles). view mode, use argument `grob.dim` just justification text relative point coordinates. Either one following values: \"left\" , \"right\", \"center\", \"bottom\", \"top\", vector two values first value specifies horizontal second value vertical justification. Besides mentioned values, also numeric values 0 1 can used. 0 means left justification first value bottom justification second value. Note view mode, one value used. grob.dim vector four values determine grob objects (see details) shown view mode. first second value width height displayed icon. third fourth value width height rendered png image used icon. Generally, third fourth value large enough render graphic successfully. needed view mode. parts, parts.scale, parts.legend, parts.chart, parts.free Variables determine size parts size, size.scale, size.legend, size.chart, size.free Variables determine size donut col, col.scale, col.legend, col.chart, col.free Visual variable determines col color. See details. lwd, lwd.scale, lwd.legend, lwd.chart, lwd.free Visual variable determines line width. See details. plot.order Specification order spatial features drawn. See [tm_plot_order()] details. zindex Map layers drawn top . `zindex` numbers (one map layer) determines stacking order. default map layers drawn order called. group Name group layer belongs. relevant view mode, layer groups can switched (see `group.control`) group.control view mode, group control determines layer groups can switched . Options: `\"radio\"` radio buttons (meaning one group can shown), `\"check\"` check boxes (multiple groups can shown), `\"none\"` control (group (de)selected). popup.vars names data variables shown popups `\"view\"` mode. Set popup.vars `TRUE` show variables shape object. Set popup.vars `FALSE` disable popups. Set popup.vars character vector variable names variables popups. default (`NA`) depends whether visual variables (e.g.`col`) used. , shown. variables shape object shown. popup.format list formatting options popup values. See argument `legend.format` options. applicable numeric data variables. one list formatting options provided, applied numeric variables `popup.vars`. Also, (named) list lists can provided. case, list formatting options applied named variable. hover name data variable specifies hover labels (view mode ). Set `FALSE` disable hover labels. default `FALSE`, unless `id` specified. case, set `id`, id name data variable specifies indices spatial features. used `\"view\"` mode. options options passed corresponding `opt_<layer_function>` function fill, fill.scale, fill.legend, fill.chart, fill.free Visual variable determines fill color. See details.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_flowers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map layer: flowers — opt_tm_flowers","text":"[tmap::tmap-element], supposed stacked [tmap::tm_shape()] using `+` operator. `opt_<layer_function>` function returns list passed `options` argument.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_flowers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map layer: flowers — opt_tm_flowers","text":"","code":"library(tmap)  tm_shape(World) +   tm_polygons(fill = \"white\", popup.vars = FALSE) + tm_shape(World) +    tm_flowers(     parts = tm_vars(c(\"gender\", \"press\", \"footprint\",                \"well_being\", \"inequality\"), multivariate = TRUE),   fill.scale = tm_scale(values = \"friendly5\"),   size = 1.5,      popup.vars = c(\"gender\", \"press\", \"footprint\", \"well_being\",\"inequality\"),      id = \"name\") + tm_basemap(NULL) + tm_layout(bg.color = \"grey90\") #> [tip] Consider a suitable map projection, e.g. by adding `+ tm_crs(\"auto\")`. #> This message is displayed once per session.    # make leaf sizes consistent: the larger, the better # use ranking instead of values   q = function(x) {   r = rank(x)   r[is.na(x)] = NA   r = r / max(r, na.rm = TRUE)   r }  World$rank_well_being = q((World$well_being / 8)) World$rank_footprint = q(((50 - World$footprint) / 50)) World$rank_inequality = q(((65 - World$inequality) / 65)) World$rank_press = q(1 - ((100 - World$press) / 100)) World$rank_gender = q(1 - World$gender)  tm_shape(World) +   tm_polygons(fill = \"white\", popup.vars = FALSE) + tm_shape(World) +     tm_flowers(     parts =        tm_vars(c(\"rank_gender\", \"rank_press\", \"rank_footprint\",              \"rank_well_being\", \"rank_inequality\"), multivariate = TRUE),     fill.scale = tm_scale(values = \"friendly5\"),     size = 1.5,      popup.vars = c(\"rank_gender\", \"rank_press\", \"rank_footprint\",              \"rank_well_being\",\"rank_inequality\"), id = \"name\") + tm_basemap(NULL) + tm_layout(bg.color = \"grey90\")   ttmp() #> ℹ tmap mode set to \"view\". #> ℹ switch back to \"plot\" mode with `tmap::ttm()` #> Error: not all variables specified in tm_vars are found"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales: composition — tm_scale_composition","title":"Scales: composition — tm_scale_composition","text":"Scales tmap configured family functions prefix `tm_scale`. function used input `.scale` arguments layer functions (e.g. `fill.scale` [tm_polygons()]). function `tm_scale_composition()` used creation composition glyphs, pie charts donut charts.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales: composition — tm_scale_composition","text":"","code":"tm_scale_composition(   values = NA,   values.repeat = FALSE,   values.range = NA,   values.scale = 1,   value.na = NA,   value.null = NA,   value.neutral = NA,   labels = NULL,   label.na = NA,   label.null = NA )"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales: composition — tm_scale_composition","text":"values (generic scale argument) visual values. colors (e.g. `fill` `col` `tm_polygons()`) palette name `cols4all` package (see [cols4all::c4a()]) vector colors, size (e.g. `size` `tm_symbols()`) set sizes (two values specified interpret range), symbol shapes (e.g. `shape` [tm_symbols()]) set symbols, etc. tmap option `values.var` contains default values per visual variable cases also per data type. values.repeat (generic scale argument) values repeated case categories? values.range (generic scale argument) Range values. Vector two numbers (0 1) first determines minimum second maximum. Full range, means values used, encoded `c(0, 1)`. instance, grey scale used color (black white), `c(0,1)` means colors used, `0.25, 0.75` means colors dark grey light grey used (precisely `\"grey25\"` `\"grey75\"`), `0, 0.5` means colors used black middle grey (`\"grey50\"`). one number specified, interpreted second number (first set 0). Default values can set via tmap option `values.range`. values.scale (generic scale argument) Scaling values. useful size-related visual variables, `size` [tm_symbols()] `lwd` [tm_lines()]. value.na (generic scale argument) Value used missing values. See tmap option `\"value.na\"` defaults per visual variable. value.null (generic scale argument) Value used NULL values. See tmap option `\"value.null\"` defaults per visual variable. Null data values occur --scope features shown (e.g. map Europe showing data variable per country, null values applied countries outside Europe). value.neutral (generic scale argument) Value can considered neutral. used legends visual variables map layer. E.g. `fill` `size` used [tm_symbols()] (using filled circles), size legend items filled `value.neutral` color `fill.scale` scale, fill legend items bubbles size `value.neutral` `size.scale` scale. labels (generic scale argument) Labels label.na (generic scale argument) Label missing values label.null (generic scale argument) Label null (--scope) values","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales: composition — tm_scale_composition","text":"tmap scale object used `.scale` arguments tmap layer functions","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales: multivariate — tm_scale_multi","title":"Scales: multivariate — tm_scale_multi","text":"Scales tmap configured family functions prefix `tm_scale`. function used input `.scale` arguments layer functions (e.g. `fill.scale` [tm_polygons()]). function `tm_scale_multi()` used creation glyphs, take one multiple normalized (0 1) values. E.g. flower glyph.","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales: multivariate — tm_scale_multi","text":"","code":"tm_scale_multi(   values = NA,   values.repeat = FALSE,   values.range = NA,   values.scale = 1,   value.na = NA,   value.null = NA,   value.neutral = NA,   labels = NULL,   label.na = NA,   label.null = NA )"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales: multivariate — tm_scale_multi","text":"values (generic scale argument) visual values. colors (e.g. `fill` `col` `tm_polygons()`) palette name `cols4all` package (see [cols4all::c4a()]) vector colors, size (e.g. `size` `tm_symbols()`) set sizes (two values specified interpret range), symbol shapes (e.g. `shape` [tm_symbols()]) set symbols, etc. tmap option `values.var` contains default values per visual variable cases also per data type. values.repeat (generic scale argument) values repeated case categories? values.range (generic scale argument) Range values. Vector two numbers (0 1) first determines minimum second maximum. Full range, means values used, encoded `c(0, 1)`. instance, grey scale used color (black white), `c(0,1)` means colors used, `0.25, 0.75` means colors dark grey light grey used (precisely `\"grey25\"` `\"grey75\"`), `0, 0.5` means colors used black middle grey (`\"grey50\"`). one number specified, interpreted second number (first set 0). Default values can set via tmap option `values.range`. values.scale (generic scale argument) Scaling values. useful size-related visual variables, `size` [tm_symbols()] `lwd` [tm_lines()]. value.na (generic scale argument) Value used missing values. See tmap option `\"value.na\"` defaults per visual variable. value.null (generic scale argument) Value used NULL values. See tmap option `\"value.null\"` defaults per visual variable. Null data values occur --scope features shown (e.g. map Europe showing data variable per country, null values applied countries outside Europe). value.neutral (generic scale argument) Value can considered neutral. used legends visual variables map layer. E.g. `fill` `size` used [tm_symbols()] (using filled circles), size legend items filled `value.neutral` color `fill.scale` scale, fill legend items bubbles size `value.neutral` `size.scale` scale. labels (generic scale argument) Labels label.na (generic scale argument) Label missing values label.null (generic scale argument) Label null (--scope) values","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tm_scale_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales: multivariate — tm_scale_multi","text":"tmap scale object used `.scale` arguments tmap layer functions","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmap.glyphs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Extension for 'tmap': glyphs can be created — tmap.glyphs-package","title":"Extension for 'tmap': glyphs can be created — tmap.glyphs-package","text":"New layer functions available 'tmap' used create glyph maps.","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmap.glyphs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extension for 'tmap': glyphs can be created — tmap.glyphs-package","text":"Martijn Tennekes mtennekes@gmail.com","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleComposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal method for tm_scale_composition — tmapScaleComposition","title":"Internal method for tm_scale_composition — tmapScaleComposition","text":"Internal method tm_scale_composition","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleComposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal method for tm_scale_composition — tmapScaleComposition","text":"","code":"tmapScaleComposition(   ...,   scale,   legend,   chart,   o,   aes,   layer,   layer_args,   sortRev,   bypass_ord,   submit_legend = TRUE )  tmapValuesCheck_comppart(x, is_var = TRUE)  tmapValuesIsDiv_comppart(x)  tmapValuesRange_comppart(x, n, isdiv)  tmapValuesVV_comppart(   x,   value.na,   isdiv,   n,   dvalues,   are_breaks,   midpoint,   range,   scale,   rep,   o )  tmapValuesSubmit_comppart(x, args)  tmapValuesScale_comppart(x, scale)  tmapValuesColorize_comppart(x, pc)  tmapValuesCVV_comppart(x, value.na, n, range, scale, rep, o)"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleComposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal method for tm_scale_composition — tmapScaleComposition","text":"... variables scale, legend, chart, o, aes, layer, layer_args, sortRev, bypass_ord, submit_legend arguments described","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleComposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal method for tm_scale_composition — tmapScaleComposition","text":"internal tmap object","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal method for tm_scale_multi — tmapScaleMulti","title":"Internal method for tm_scale_multi — tmapScaleMulti","text":"Internal method tm_scale_multi","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal method for tm_scale_multi — tmapScaleMulti","text":"","code":"tmapScaleMulti(   ...,   scale,   legend,   chart,   o,   aes,   layer,   layer_args,   sortRev,   bypass_ord,   submit_legend = TRUE )  tmapValuesCheck_multi(x, is_var = TRUE)  tmapValuesIsDiv_multi(x)  tmapValuesRange_multi(x, n, isdiv)  tmapValuesVV_multi(   x,   value.na,   isdiv,   n,   dvalues,   are_breaks,   midpoint,   range,   scale,   rep,   o )  tmapValuesSubmit_multi(x, args)  tmapValuesScale_multi(x, scale)  tmapValuesColorize_multi(x, pc)  tmapValuesCVV_multi(x, value.na, n, range, scale, rep, o)"},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal method for tm_scale_multi — tmapScaleMulti","text":"... variables scale, legend, chart, o, aes, layer, layer_args, sortRev, bypass_ord, submit_legend arguments described","code":""},{"path":"https://r-tmap.github.io/tmap.glyphs/reference/tmapScaleMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal method for tm_scale_multi — tmapScaleMulti","text":"internal tmap object","code":""}]
